@page "/inspection"
@layout MainLayout
@using TrustYourBrand.Models
@using TrustYourBrand.Services
@using Microsoft.AspNetCore.Components
@inject IHttpClientFactory HttpClientFactory
@inject TrustYourBrand.Services.IInspectionService InspectionService
@inject TrustYourBrand.Services.ILocalStorageService LocalStorageService
@inject TrustYourBrand.Services.IStoreService StoreService
@inject TrustYourBrand.Services.IUserService UserService
@inject TrustYourBrand.Services.ITemplateService TemplateService
@inject TrustYourBrand.Services.CultureChangeService CultureChangeService
@inject ILanguageContainerService LanguageContainer
@inject NavigationManager NavigationManager

<div class="table-container">
    <div class="table-header">
        <div class="action-buttons">
            <button class="btn btn-action" @onclick="OpenCreateInspection">Create New Inspection</button>
            <button class="btn btn-action">@LanguageContainer.Keys["Export"]</button>
            <button class="btn btn-action">@LanguageContainer.Keys["Import"]</button>
            <button class="btn btn-action">Select columns</button>
        </div>
        <div class="search-bar">
            <input type="text" placeholder="Search" class="search-input" />
        </div>
    </div>

    <table class="users-table">
        <thead>
            <tr>
                <th class="action-column"></th>
                <th class="action-column"></th>
                <th class="action-column"></th>
                <th>Type</th>
                <th>Name</th>
                <th>Frequency</th>
                <th>Mode</th>
                <th>Progress</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @if (Inspections == null)
            {
                <tr><td colspan="8">Loading...</td></tr>
            }
            else if (!Inspections.Any())
            {
                <tr><td colspan="8">No inspections found.</td></tr>
            }
            else
            {
                @foreach (var inspection in PaginatedInspections)
                {
                    <tr>
                        <td class="action-column">
                            @if (inspection.Mode == "Draft")
                            {
                                <span class="material-symbols-outlined action-icon edit-icon" @onclick="() => EditInspection(inspection.Id)">edit</span>
                            }
                            else
                            {
                                <span class="action-placeholder"> </span>
                            }
                        </td>
                        <td class="action-column">
                            <span class="material-symbols-outlined action-icon delete-icon" @onclick="() => ShowDeleteConfirmation(inspection)">delete</span>
                        </td>
                        <td class="action-column">
                            <span class="material-symbols-outlined action-icon detail-icon" @onclick="() => ShowInspectionDetails(inspection)">
                                @(ExpandedInspectionId == inspection.Id ? "keyboard_arrow_down" : "keyboard_arrow_right")
                            </span>
                        </td>
                        <td>@inspection.Type</td>
                        <td>@inspection.InspectionName</td>
                        <td>@inspection.Frequency</td>
                        <td class="@(inspection.Mode == "Draft" ? "mode-draft" : "mode-launched")">@(inspection.Mode ?? "Unknown")</td>
                        <td>
                            <div class="progress-container">
                                <div class="progress-bar">
                                    <div class="progress" style="width: @((int)inspection.ProgressPercentage)%;"></div>
                                </div>
                                <span class="progress-text">@((int)inspection.ProgressPercentage)%</span>
                            </div>
                        </td>
                        <td>
                            @if (inspection.Estado == "Closed" || inspection.Estado == "Canceled")
                            {
                                <div class="status-display">
                                    <span class="status-dot @GetStatusDotClass(inspection.Estado)"></span>
                                    <span>@inspection.Estado</span>
                                </div>
                            }
                            else
                            {
                                <div class="status-dropdown-wrapper">
                                    <span class="status-dot @GetStatusDotClass(inspection.Estado)"></span>
                                    <select class="status-dropdown" @bind:get="inspection.Estado" @bind:set="@(newStatus => UpdateInspectionStatus(inspection, newStatus))">
                                        <option value="Ongoing">Ongoing</option>
                                        <option value="Standby">Stand-by</option>
                                        <option value="Closed">Closed</option>
                                        <option value="Canceled">Canceled</option>
                                    </select>
                                </div>
                            }
                        </td>
                    </tr>

                    @if (ExpandedInspectionId == inspection.Id)
                    {
                        <tr class="expanded-row">
                            <td colspan="8">
                                <div class="inspection-details-container">
                                    <div class="details-row">
                                        <div class="details-column">
                                            <span class="details-label">Inspection Progress:</span>
                                            <div class="progress-container">
                                                <div class="progress-bar">
                                                    <div class="progress" style="width: @((int)inspection.ProgressPercentage)%;"></div>
                                                </div>
                                                <span class="progress-text">@((int)inspection.ProgressPercentage)%</span>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="details-row">
                                        <div class="details-column">
                                            <span class="details-label">Start Date:</span>
                                            <span class="details-value">@(inspection.StartDate?.ToString("dd/MM/yyyy") ?? "N/A")</span>
                                        </div>
                                        <div class="details-column">
                                            <span class="details-label">Due Date:</span>
                                            <span class="details-value">@(inspection.DueDate?.ToString("dd/MM/yyyy") ?? "N/A")</span>
                                        </div>
                                        <div class="details-column">
                                            <span class="details-label">Finish Date:</span>
                                            <span class="details-value">@(inspection.FinishDate?.ToString("dd/MM/yyyy") ?? "N/A")</span>
                                        </div>
                                    </div>

                                    <div class="details-row">
                                        <div class="details-column">
                                            <span class="details-label">Language:</span>
                                            <span class="details-value">@(inspection.Language ?? "N/A")</span>
                                        </div>
                                    </div>

                                    <div class="details-row">
                                        <div class="details-column">
                                            <span class="details-label">Number of Questions:</span>
                                            <span class="details-value">@(inspection.Questions?.Count ?? 0)</span>
                                        </div>
                                    </div>

                                    <div class="details-row">
                                        <div class="details-column">
                                            <span class="details-label">Purpose:</span>
                                            <span class="details-value">@(inspection.Purpose ?? "N/A")</span>
                                        </div>
                                    </div>

                                    <div class="details-row">
                                        <div class="details-column">
                                            <span class="details-label">Status:</span>
                                            <div class="status-breakdown">
                                                <div class="status-item">
                                                    <span class="status-dot status-dot-ongoing"></span>
                                                    <span>Ongoing</span>
                                                    <span class="status-count">@(inspection.StatusBreakdown?.Ongoing ?? 0)</span>
                                                </div>
                                                <div class="status-item">
                                                    <span class="status-dot status-dot-closed"></span>
                                                    <span>Closed</span>
                                                    <span class="status-count">@(inspection.StatusBreakdown?.Closed ?? 0)</span>
                                                </div>
                                                <div class="status-item">
                                                    <span class="status-dot status-dot-standby"></span>
                                                    <span>Standby</span>
                                                    <span class="status-count">@(inspection.StatusBreakdown?.Standby ?? 0)</span>
                                                </div>
                                                <div class="status-item">
                                                    <span class="status-dot status-dot-canceled"></span>
                                                    <span>Canceled</span>
                                                    <span class="status-count">@(inspection.StatusBreakdown?.Canceled ?? 0)</span>
                                                </div>
                                                <div class="status-item">
                                                    <span class="details-label">Total:</span>
                                                    <span class="status-count">@((inspection.StatusBreakdown?.Ongoing ?? 0) + (inspection.StatusBreakdown?.Closed ?? 0) + (inspection.StatusBreakdown?.Standby ?? 0) + (inspection.StatusBreakdown?.Canceled ?? 0))</span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="details-column">
                                            <span class="details-label">Stores:</span>
                                            <div class="stores-breakdown">
                                                <span class="stores-count">@(inspection.StoresCount ?? 0)</span>
                                                <span class="material-symbols-outlined stores-icon">visibility</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>

    <div class="pagination">
        <span>Page 1 of 1</span>
        <div class="pagination-buttons">
            <button class="btn btn-pagination">Prev</button>
            <button class="btn btn-pagination btn-active">1</button>
            <button class="btn btn-pagination">Next</button>
        </div>
    </div>

    @if (ShowEditModal)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h3>Edit Inspection</h3>
                <form>
                    <div class="stepper-container">
                        <div class="step @(CurrentStep >= 1 ? "active" : "")">
                            <div class="circle" @onclick="() => SetStep(1)">1</div>
                            <span>Information</span>
                        </div>
                        <span class="material-symbols-outlined arrow-icon @(CurrentStep >= 2 ? "active" : "")">arrow_forward</span>
                        <div class="step @(CurrentStep >= 2 ? "active" : "")">
                            <div class="circle" @onclick="() => SetStep(2)">2</div>
                            <span>Store Selection</span>
                        </div>
                        <span class="material-symbols-outlined arrow-icon @(CurrentStep >= 3 ? "active" : "")">arrow_forward</span>
                        <div class="step @(CurrentStep >= 3 ? "active" : "")">
                            <div class="circle" @onclick="() => SetStep(3)">3</div>
                            <span>Guest</span>
                        </div>
                        <span class="material-symbols-outlined arrow-icon @(CurrentStep >= 4 ? "active" : "")">arrow_forward</span>
                        <div class="step @(CurrentStep >= 4 ? "active" : "")">
                            <div class="circle" @onclick="() => SetStep(4)">4</div>
                            <span>Question</span>
                        </div>
                    </div>
                    <div class="step-content">
                        @switch (CurrentStep)
                        {
                            case 1:
                                <h3 style="text-align: left; color: #6aa4d5;">Information</h3>
                                <table style="width: 100%; table-layout: fixed;">
                                    <tr>
                                        <td style="width: 50%; padding-right: 10px;">
                                            <label for="template" style="text-align:left;">Template</label>
                                            <select id="template" style="width: 100%;" @bind="EditingInspection.TemplateId" @bind:after="OnTemplateChanged">
                                                <option value="">Select the template</option>
                                                @foreach (var template in TemplateDisponiveis)
                                                {
                                                    <option value="@template.FormularioId">@template.Nome</option>
                                                }
                                            </select>
                                        </td>
                                        <td style="width: 50%; padding-left: 10px;">
                                            <label for="language" style="text-align:left;">Language</label>
                                            <select id="language" class="template-select" style="width: 100%;" @bind="EditingInspection.Language">
                                                <option value="">Select the Language</option>
                                                <option value="Portuguese">Portuguese</option>
                                                <option value="English">English</option>
                                            </select>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="width: 50%; padding-right: 10px;">
                                            <label for="name" style="text-align:left; margin-top: 20px;">Inspection Name</label>
                                            <input type="text" id="name" class="input-name" style="width: 100%;" @bind="EditingInspection.InspectionName" />
                                        </td>
                                        <td style="width: 50%; padding-left: 10px;">
                                            <label for="frequency" style="text-align:left; margin-top: 20px;">Frequency</label>
                                            <select id="frequency" class="template-select" style="width: 100%;" @bind="EditingInspection.Frequency">
                                                <option value="">Select the Frequency</option>
                                                <option value="Weekly">Weekly</option>
                                                <option value="Monthly">Monthly</option>
                                                <option value="Annually">Annually</option>
                                            </select>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="width: 50%; padding: 0 10px;">
                                            <label for="start" style="text-align:left; margin-top: 20px;">Start Date</label>
                                            <input type="date" id="start" style="width: 100%;" @bind="EditingInspection.StartDate" />
                                        </td>
                                        <td style="width: 50%; padding: 0 10px;">
                                            <label for="due" style="text-align:left; margin-top: 20px;">Due Date</label>
                                            <input type="date" id="due" style="width: 100%;" @bind="EditingInspection.DueDate" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="width: 50%; padding: 0 10px;">
                                            <label for="description" style="text-align:left; margin-top: 20px;">Description</label>
                                            <input type="text" id="description" style="width: 100%;" @bind="EditingInspection.Description" />
                                        </td>
                                        <td style="width: 50%; padding: 0 10px;">
                                            <label for="brand" style="text-align:left; margin-top: 20px;">Brand</label>
                                            <select id="brand" style="width: 100%;" @bind="EditingInspection.MarcaId">
                                                <option value="">Select the brand</option>
                                                @foreach (var brand in BrandDisponiveis)
                                                {
                                                    <option value="@brand.MarcaId">@brand.Nome</option>
                                                }
                                            </select>
                                        </td>
                                    </tr>
                                </table>
                                break;
                            case 2:
                                <h3 style="text-align: left; color: #6aa4d5;">Store Selection</h3>
                                <div class="table-container-selection">
                                    <table class="selection-table">
                                        <thead>
                                            <tr>
                                                <th>
                                                    <input type="checkbox"
                                                           class="store-checkbox select-all-checkbox"
                                                           @onchange="(e) => ToggleSelectAllStores((bool)((Microsoft.AspNetCore.Components.ChangeEventArgs)e).Value)" />
                                                </th>
                                                <th>Store Name</th>
                                                <th>Country</th>
                                                <th>City</th>
                                                <th>Store Type</th>
                                                <th>Zone</th>
                                                <th>Store Manager</th>
                                                <th>Condition</th>
                                                <th>Inspector</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (StoreList == null)
                                            {
                                                <tr><td colspan="9">Loading...</td></tr>
                                            }
                                            else if (!StoreList.Any())
                                            {
                                                <tr><td colspan="9">No stores found.</td></tr>
                                            }
                                            else
                                            {
                                                @foreach (var store in PaginatedStores)
                                                {
                                                    <tr>
                                                        <td>
                                                            <input type="checkbox"
                                                                   class="store-checkbox store-row-checkbox"
                                                                   checked="@EditingInspection.SelectedStoreIds.Contains(store.LojaId)"
                                                                   @onchange="(e) => UpdateStoreSelection(store.LojaId, (bool)((Microsoft.AspNetCore.Components.ChangeEventArgs)e).Value)" />
                                                        </td>
                                                        <td>@store.Nome</td>
                                                        <td>@store.Country</td>
                                                        <td>@store.City</td>
                                                        <td>@store.StoreType</td>
                                                        <td>@store.Zona</td>
                                                        <td>@store.StoreManager</td>
                                                        <td>@store.Condition</td>
                                                        <td>@store.Inspector</td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>

                                    <div class="pagination-table-selection">
                                        <span>Page 1 of 1</span>
                                        <div class="pagination-buttons-selection">
                                            <button class="btn btn-pagination-selection">Prev</button>
                                            <button class="btn btn-pagination-selection btn-active">1</button>
                                            <button class="btn btn-pagination-selection">Next</button>
                                        </div>
                                    </div>
                                </div>
                                break;

                            case 3:
                                <h3 style="text-align: left; color: #6aa4d5;">Guest</h3>
                                <div class="table-container-selection">
                                    <table class="selection-table">
                                        <thead>
                                            <tr>
                                                <th>
                                                    <input type="checkbox"
                                                           class="store-checkbox select-all-checkbox"
                                                           @onchange="(e) => ToggleSelectAllGuests((bool)((Microsoft.AspNetCore.Components.ChangeEventArgs)e).Value)" />
                                                </th>
                                                <th>First Name</th>
                                                <th>Last Name</th>
                                                <th>Email</th>
                                                <th>Store Name</th>
                                                <th>Department</th>
                                                <th>Function</th>
                                                <th>Role</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (Userslist == null)
                                            {
                                                <tr><td colspan="8">Loading...</td></tr>
                                            }
                                            else if (!Userslist.Any())
                                            {
                                                <tr><td colspan="8">No users found.</td></tr>
                                            }
                                            else
                                            {
                                                @foreach (var user in PaginatedUsers)
                                                {
                                                    <tr>
                                                        <td>
                                                            <input type="checkbox"
                                                                   class="store-checkbox store-row-checkbox"
                                                                   checked="@EditingInspection.SelectedGuestIds.Contains(user.Id)"
                                                                   @onchange="(e) => UpdateGuestSelection(user.Id, (bool)((Microsoft.AspNetCore.Components.ChangeEventArgs)e).Value)" />
                                                        </td>
                                                        <td>@user.FirstName</td>
                                                        <td>@user.LastName</td>
                                                        <td>@user.Email</td>
                                                        <td>@user.Store</td>
                                                        <td>@user.Department</td>
                                                        <td>@user.Function</td>
                                                        <td>@user.Role</td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>

                                    <div class="pagination-table-selection">
                                        <span>Page 1 of 1</span>
                                        <div class="pagination-buttons-selection">
                                            <button class="btn btn-pagination-selection">Prev</button>
                                            <button class="btn btn-pagination-selection btn-active">1</button>
                                            <button class="btn btn-pagination-selection">Next</button>
                                        </div>
                                    </div>
                                </div>
                                break;

                            case 4:
                                <h3 style="text-align: left; color: #6aa4d5;">Question</h3>
                                @if (EditingInspection.TemplateId.HasValue)
                                {
                                    @if (isLoadingQuestions)
                                    {
                                        <p>Loading questions...</p>
                                    }
                                    else
                                    {
                                        <p>Questions from selected template: @(TemplateDisponiveis.FirstOrDefault(t => t.FormularioId == EditingInspection.TemplateId)?.Nome ?? "N/A")</p>
                                        <div class="table-container-selection">
                                            <table class="selection-table">
                                                <thead>
                                                    <tr>
                                                        <th id="sectionColumnHeader">Section</th>
                                                        <th>Question</th>
                                                        <th>Response</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @if (TemplateQuestions == null || !TemplateQuestions.Any())
                                                    {
                                                        <tr>
                                                            <td colspan="3">No questions available for this template.</td>
                                                        </tr>
                                                    }
                                                    else
                                                    {
                                                        @foreach (var question in TemplateQuestions)
                                                        {
                                                            <tr>
                                                                <td>@(question.SeccaoId.HasValue ? SectionDisponiveis.FirstOrDefault(s => s.SeccaoId == question.SeccaoId)?.Nome ?? "N/A" : "N/A")</td>
                                                                <td>@question.Text</td>
                                                                <td>@question.ResponseType</td>
                                                            </tr>
                                                        }
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <!-- Código existente para perguntas personalizadas -->
                                    <div class="dropdown-section-container">
                                        <select id="sectionSelect" style="width: 100%;" @bind="selectedSection">
                                            <option value="">Select the section of store</option>
                                            @foreach (var sec in SectionDisponiveis)
                                            {
                                                <option value="@sec.SeccaoId">@sec.Nome</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="table-container-selection">
                                        <table class="selection-table">
                                            <thead>
                                                <tr>
                                                    <th id="sectionColumnHeader">Section</th>
                                                    <th>Question</th>
                                                    <th>Response</th>
                                                    <th class="action-column"></th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @if (!EditingInspection.Questions.Any())
                                                {
                                                    <tr>
                                                        <td colspan="4">No questions added yet.</td>
                                                    </tr>
                                                }
                                                else
                                                {
                                                    @for (int i = 0; i < EditingInspection.Questions.Count; i++)
                                                    {
                                                        var questionIndex = i;
                                                        var question = EditingInspection.Questions[i];
                                                        <tr>
                                                            <td>@(selectedSection.HasValue ? SectionDisponiveis.FirstOrDefault(s => s.SeccaoId == selectedSection)?.Nome ?? "N/A" : "N/A")</td>
                                                            <td>
                                                                <input type="text" placeholder="Type your question here" style="width: 100%;" @bind="question.Text" @bind:event="oninput" />
                                                            </td>
                                                            <td>
                                                                <select class="response-select" @bind="question.ResponseType">
                                                                    <option value="">Select the Response</option>
                                                                    <option value="Yes/No">Yes/No</option>
                                                                    <option value="0-10 (Scale)">0-10 (Scale)</option>
                                                                    <option value="Good/Enough/Bad">Good/Enough/Bad</option>
                                                                </select>
                                                            </td>
                                                            <td class="action-column">
                                                                <span class="material-symbols-outlined action-icon delete-icon" @onclick="() => RemoveQuestion(questionIndex)">delete</span>
                                                            </td>
                                                        </tr>
                                                    }
                                                }
                                            </tbody>
                                        </table>

                                        <div class="add-question-section">
                                            <button type="button" class="btn btn-add-question" @onclick="AddQuestion">Add New Question</button>
                                        </div>

                                        <div class="pagination-table-selection">
                                            <span>Page 1 of 1</span>
                                            <div class="pagination-buttons-selection">
                                                <button class="btn btn-pagination-selection">Prev</button>
                                                <button class="btn btn-pagination-selection btn-active">1</button>
                                                <button class="btn btn-pagination-selection">Next</button>
                                            </div>
                                        </div>
                                    </div>
                                }
                                break;

                        }
                    </div>
                    <div class="navigation">
                        @if (CurrentStep == 4)
                        {
                            <button type="button" @onclick="PreviousStep">PREVIOUS</button>
                            <button type="button" class="btn-create-inspection" @onclick="UpdateInspection">EDIT INSPECTION</button>
                        }
                        else
                        {
                            <button type="button" @onclick="PreviousStep" disabled="@(CurrentStep == 1)">PREVIOUS</button>
                            <button type="button" @onclick="NextStep" disabled="@(CurrentStep == 4)">NEXT</button>
                        }
                    </div>
                </form>
            </div>
        </div>
    }

    @if (ShowDeleteModal)
    {
        <div class="modal-overlay delete-modal-overlay">
            <div class="modal-content">
                <h3>Delete Inspection</h3>
                <p>Are you sure you want to delete the inspection?</p>
                <div class="modal-buttons">
                    <button class="btn btn-confirm" @onclick="ConfirmDelete">CONFIRM</button>
                    <button class="btn btn-cancel" @onclick="CancelDelete">CANCEL</button>
                </div>
            </div>
        </div>
    }

    @if (ShowCreateInspection)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h3>Create Inspection</h3>
                <form>
                    <div class="stepper-container">
                        <div class="step @(CurrentStep >= 1 ? "active" : "")">
                            <div class="circle" @onclick="() => SetStep(1)">1</div>
                            <span>Information</span>
                        </div>
                        <span class="material-symbols-outlined arrow-icon @(CurrentStep >= 2 ? "active" : "")">arrow_forward</span>
                        <div class="step @(CurrentStep >= 2 ? "active" : "")">
                            <div class="circle" @onclick="() => SetStep(2)">2</div>
                            <span>Store Selection</span>
                        </div>
                        <span class="material-symbols-outlined arrow-icon @(CurrentStep >= 3 ? "active" : "")">arrow_forward</span>
                        <div class="step @(CurrentStep >= 3 ? "active" : "")">
                            <div class="circle" @onclick="() => SetStep(3)">3</div>
                            <span>Guest</span>
                        </div>
                        <span class="material-symbols-outlined arrow-icon @(CurrentStep >= 4 ? "active" : "")">arrow_forward</span>
                        <div class="step @(CurrentStep >= 4 ? "active" : "")">
                            <div class="circle" @onclick="() => SetStep(4)">4</div>
                            <span>Question</span>
                        </div>
                    </div>
                    <div class="step-content">
                        @switch (CurrentStep)
                        {
                            case 1:
                                <h3 style="text-align: left; color: #6aa4d5;">Information</h3>
                                <table style="width: 100%; table-layout: fixed;">
                                    <tr>
                                        <td style="width: 50%; padding-right: 10px;">
                                            <label for="template" style="text-align:left;">Template</label>
                                            <select id="template" style="width: 100%;" @bind="NewInspection.TemplateId" @bind:after="OnTemplateChanged">
                                                <option value="">Select the template</option>
                                                @foreach (var template in TemplateDisponiveis)
                                                {
                                                    <option value="@template.FormularioId">@template.Nome</option>
                                                }
                                            </select>
                                        </td>
                                        <td style="width: 50%; padding-left: 10px;">
                                            <label for="language" style="text-align:left;">Language</label>
                                            <select id="language" class="template-select" style="width: 100%;" @bind="NewInspection.Language">
                                                <option value="">Select the Language</option>
                                                <option value="Portuguese">Portuguese</option>
                                                <option value="English">English</option>
                                            </select>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="width: 50%; padding-right: 10px;">
                                            <label for="name" style="text-align:left; margin-top: 20px;">Inspection Name</label>
                                            <input type="text" id="name" class="input-name" placeholder="Enter the Name of the inspection" style="width: 100%;" @bind="NewInspection.InspectionName" />
                                        </td>
                                        <td style="width: 50%; padding-left: 10px;">
                                            <label for="frequency" style="text-align:left; margin-top: 20px;">Frequency</label>
                                            <select id="frequency" class="template-select" style="width: 100%;" @bind="NewInspection.Frequency">
                                                <option value="">Select the Frequency</option>
                                                <option value="Weekly">Weekly</option>
                                                <option value="Monthly">Monthly</option>
                                                <option value="Annually">Annually</option>
                                            </select>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="width: 50%; padding: 0 10px;">
                                            <label for="start" style="text-align:left; margin-top: 20px;">Start Date</label>
                                            <input type="date" id="start" style="width: 100%;" @bind="NewInspection.StartDate" />
                                        </td>
                                        <td style="width: 50%; padding: 0 10px;">
                                            <label for="due" style="text-align:left; margin-top: 20px;">Due Date</label>
                                            <input type="date" id="due" style="width: 100%;" @bind="NewInspection.DueDate" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="width: 50%; padding: 0 10px;">
                                            <label for="description" style="text-align:left; margin-top: 20px;">Description</label>
                                            <input type="text" id="description" placeholder="Enter the Description of the inspection" style="width: 100%;" @bind="NewInspection.Description" />
                                        </td>
                                        <td style="width: 50%; padding: 0 10px;">
                                            <label for="brand" style="text-align:left; margin-top: 20px;">Brand</label>
                                            <select id="brand" style="width: 100%;" @bind="NewInspection.MarcaId">
                                                <option value="">Select the brand</option>
                                                @foreach (var brand in BrandDisponiveis)
                                                {
                                                    <option value="@brand.MarcaId">@brand.Nome</option>
                                                }
                                            </select>
                                        </td>
                                    </tr>
                                </table>
                                break;
                            case 2:
                                <h3 style="text-align: left; color: #6aa4d5;">Store Selection</h3>
                                <div class="table-container-selection">
                                    <table class="selection-table">
                                        <thead>
                                            <tr>
                                                <th>
                                                    <input type="checkbox"
                                                           class="store-checkbox select-all-checkbox"
                                                           @onchange="(e) => ToggleSelectAllStores((bool)((Microsoft.AspNetCore.Components.ChangeEventArgs)e).Value)" />
                                                </th>
                                                <th>Store Name</th>
                                                <th>Country</th>
                                                <th>City</th>
                                                <th>Store Type</th>
                                                <th>Zone</th>
                                                <th>Store Manager</th>
                                                <th>Condition</th>
                                                <th>Inspector</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (StoreList == null)
                                            {
                                                <tr><td colspan="9">Loading...</td></tr>
                                            }
                                            else if (!StoreList.Any())
                                            {
                                                <tr><td colspan="9">No stores found.</td></tr>
                                            }
                                            else
                                            {
                                                @foreach (var store in PaginatedStores)
                                                {
                                                    <tr>
                                                        <td>
                                                            <input type="checkbox"
                                                                   class="store-checkbox store-row-checkbox"
                                                                   checked="@NewInspection.SelectedStoreIds.Contains(store.LojaId)"
                                                                   @onchange="(e) => UpdateStoreSelection(store.LojaId, (bool)((Microsoft.AspNetCore.Components.ChangeEventArgs)e).Value)" />
                                                        </td>
                                                        <td>@store.Nome</td>
                                                        <td>@store.Country</td>
                                                        <td>@store.City</td>
                                                        <td>@store.StoreType</td>
                                                        <td>@store.Zona</td>
                                                        <td>@store.StoreManager</td>
                                                        <td>@store.Condition</td>
                                                        <td>@store.Inspector</td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>

                                    <div class="pagination-table-selection">
                                        <span>Page 1 of 1</span>
                                        <div class="pagination-buttons-selection">
                                            <button class="btn btn-pagination-selection">Prev</button>
                                            <button class="btn btn-pagination-selection btn-active">1</button>
                                            <button class="btn btn-pagination-selection">Next</button>
                                        </div>
                                    </div>
                                </div>
                                break;
                            case 3:
                                <h3 style="text-align: left; color: #6aa4d5;">Guest</h3>
                                <div class="table-container-selection">
                                    <table class="selection-table">
                                        <thead>
                                            <tr>
                                                <th>
                                                    <input type="checkbox"
                                                           class="store-checkbox select-all-checkbox"
                                                           @onchange="(e) => ToggleSelectAllGuests((bool)((Microsoft.AspNetCore.Components.ChangeEventArgs)e).Value)" />
                                                </th>
                                                <th>First Name</th>
                                                <th>Last Name</th>
                                                <th>Email</th>
                                                <th>Store Name</th>
                                                <th>Department</th>
                                                <th>Function</th>
                                                <th>Role</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (Userslist == null)
                                            {
                                                <tr><td colspan="8">Loading...</td></tr>
                                            }
                                            else if (!Userslist.Any())
                                            {
                                                <tr><td colspan="8">No users found.</td></tr>
                                            }
                                            else
                                            {
                                                @foreach (var user in PaginatedUsers)
                                                {
                                                    <tr>
                                                        <td>
                                                            <input type="checkbox"
                                                                   class="store-checkbox store-row-checkbox"
                                                                   checked="@NewInspection.SelectedGuestIds.Contains(user.Id)"
                                                                   @onchange="(e) => UpdateGuestSelection(user.Id, (bool)((Microsoft.AspNetCore.Components.ChangeEventArgs)e).Value)" />
                                                        </td>
                                                        <td>@user.FirstName</td>
                                                        <td>@user.LastName</td>
                                                        <td>@user.Email</td>
                                                        <td>@user.Store</td>
                                                        <td>@user.Department</td>
                                                        <td>@user.Function</td>
                                                        <td>@user.Role</td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>

                                    <div class="pagination-table-selection">
                                        <span>Page 1 of 1</span>
                                        <div class="pagination-buttons-selection">
                                            <button class="btn btn-pagination-selection">Prev</button>
                                            <button class="btn btn-pagination-selection btn-active">1</button>
                                            <button class="btn btn-pagination-selection">Next</button>
                                        </div>
                                    </div>
                                </div>
                                break;
                            case 4:
                                <h3 style="text-align: left; color: #6aa4d5;">Question</h3>
                                @if (NewInspection.TemplateId.HasValue)
                                {
                                    @if (isLoadingQuestions)
                                    {
                                        <p>Loading questions...</p>
                                    }
                                    else
                                    {
                                        <p>Questions from selected template: @(TemplateDisponiveis.FirstOrDefault(t => t.FormularioId == NewInspection.TemplateId)?.Nome ?? "N/A")</p>
                                        <div class="table-container-selection">
                                            <table class="selection-table">
                                                <thead>
                                                    <tr>
                                                        <th id="sectionColumnHeader">Section</th>
                                                        <th>Question</th>
                                                        <th>Response</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @if (TemplateQuestions == null || !TemplateQuestions.Any())
                                                    {
                                                        <tr>
                                                            <td colspan="3">No questions available for this template.</td>
                                                        </tr>
                                                    }
                                                    else
                                                    {
                                                        @foreach (var question in TemplateQuestions)
                                                        {
                                                            <tr>
                                                                <td>@(question.SeccaoId.HasValue ? SectionDisponiveis.FirstOrDefault(s => s.SeccaoId == question.SeccaoId)?.Nome ?? "N/A" : "N/A")</td>
                                                                <td>@question.Text</td>
                                                                <td>@question.ResponseType</td>
                                                            </tr>
                                                        }
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <!-- Código existente para perguntas personalizadas -->
                                    <div class="dropdown-section-container">
                                        <select id="sectionSelect" style="width: 100%;" @bind="selectedSection">
                                            <option value="">Select the section of store</option>
                                            @foreach (var sec in SectionDisponiveis)
                                            {
                                                <option value="@sec.SeccaoId">@sec.Nome</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="table-container-selection">
                                        <table class="selection-table">
                                            <thead>
                                                <tr>
                                                    <th id="sectionColumnHeader">Section</th>
                                                    <th>Question</th>
                                                    <th>Response</th>
                                                    <th class="action-column"></th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @if (!NewInspection.Questions.Any())
                                                {
                                                    <tr>
                                                        <td colspan="4">No questions added yet.</td>
                                                    </tr>
                                                }
                                                else
                                                {
                                                    @for (int i = 0; i < NewInspection.Questions.Count; i++)
                                                    {
                                                        var questionIndex = i;
                                                        var question = NewInspection.Questions[i];
                                                        <tr>
                                                            <td>@(selectedSection.HasValue ? SectionDisponiveis.FirstOrDefault(s => s.SeccaoId == selectedSection)?.Nome ?? "N/A" : "N/A")</td>
                                                            <td>
                                                                <input type="text" placeholder="Type your question here" style="width: 100%;" @bind="question.Text" @bind:event="oninput" />
                                                            </td>
                                                            <td>
                                                                <select class="response-select" @bind="question.ResponseType">
                                                                    <option value="">Select the Response</option>
                                                                    <option value="Yes/No">Yes/No</option>
                                                                    <option value="0-10 (Scale)">0-10 (Scale)</option>
                                                                    <option value="Good/Enough/Bad">Good/Enough/Bad</option>
                                                                </select>
                                                            </td>
                                                            <td class="action-column">
                                                                <span class="material-symbols-outlined action-icon delete-icon" @onclick="() => RemoveQuestion(questionIndex)">delete</span>
                                                            </td>
                                                        </tr>
                                                    }
                                                }
                                            </tbody>
                                        </table>

                                        <div class="add-question-section">
                                            <button type="button" class="btn btn-add-question" @onclick="AddQuestion">Add New Question</button>
                                        </div>

                                        <div class="pagination-table-selection">
                                            <span>Page 1 of 1</span>
                                            <div class="pagination-buttons-selection">
                                                <button class="btn btn-pagination-selection">Prev</button>
                                                <button class="btn btn-pagination-selection btn-active">1</button>
                                                <button class="btn btn-pagination-selection">Next</button>
                                            </div>
                                        </div>
                                    </div>
                                }
                                break;
                        }
                    </div>
                    <div class="navigation">
                        @if (CurrentStep == 4)
                        {
                            <button type="button" @onclick="PreviousStep">PREVIOUS</button>
                            <button type="button" class="btn-save-draft" @onclick="SaveDraft">SAVE DRAFT</button>
                            <button type="button" class="btn-create-inspection" @onclick="CreateInspection">CREATE INSPECTION</button>
                        }
                        else
                        {
                            <button type="button" @onclick="PreviousStep" disabled="@(CurrentStep == 1)">PREVIOUS</button>
                            <button type="button" @onclick="NextStep" disabled="@(CurrentStep == 4)">NEXT</button>
                        }
                    </div>
                </form>
            </div>
        </div>
    }

    @if (errorMessage != null)
    {
        <div class="error-message">@errorMessage</div>
    }
    @if (successMessage != null)
    {
        <div class="success-message">@successMessage</div>
    }
</div>

<link href="css/Inspection.css" rel="stylesheet" />
<link href="css/PopUpStyleInspection.css" rel="stylesheet" />
<link href="css/PopUpDelete.css" rel="stylesheet" />

@code {
    private bool ShowCreateInspection { get; set; } = false;
    private int CurrentStep { get; set; } = 1;
    private int? selectedSection = null;

    private bool ShowDeleteModal { get; set; } = false;
    private bool ShowEditModal { get; set; } = false;
    private int? ExpandedInspectionId { get; set; } = null;

    private bool isLoadingQuestions { get; set; } = false;
    private int CurrentPage { get; set; } = 1;
    private int TotalPages { get; set; } = 1;
    private const int PageSize = 8;

    private string? errorMessage;
    private string? successMessage;

    

    private int? SelectedTemplateId
    {
        get => NewInspection.TemplateId;
        set
        {
            if (value != NewInspection.TemplateId)
            {
                NewInspection.TemplateId = value;
                _ = LoadTemplateQuestions(); // Disparar carregamento ao alterar template
            }
        }
    }

    private TrustYourBrand.Models.InspectionDto? InspectionToDelete { get; set; }
    private InspectionFormModel? EditingInspection { get; set; }

    private List<InspectionDto> Inspections { get; set; } = new List<InspectionDto>();
    private InspectionFormModel NewInspection { get; set; } = new InspectionFormModel();
    private List<BrandDto> BrandDisponiveis { get; set; } = new();
    private List<TemplateDto> TemplateDisponiveis { get; set; } = new();
    private List<SectionDto> SectionDisponiveis { get; set; } = new();
    private List<StoreDto> StoreList { get; set; } = new List<StoreDto>();
    private List<TrustYourBrand.Models.User> Userslist { get; set; } = new();
    private List<CustomQuestion> TemplateQuestions { get; set; } = new();

    private class InspectionFormModel
    {
        public int? TemplateId { get; set; }
        public string? Language { get; set; }
        public string? InspectionName { get; set; }
        public string? Frequency { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? DueDate { get; set; }
        public string? Description { get; set; }
        public int? MarcaId { get; set; }
        public string? Brand { get; set; }
        public List<int> SelectedStoreIds { get; set; } = new List<int>();
        public List<int> SelectedGuestIds { get; set; } = new List<int>();
        public List<CustomQuestion> Questions { get; set; } = new List<CustomQuestion>();
    }

    private List<StoreDto> PaginatedStores =>
        StoreList
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();

    private List<TrustYourBrand.Models.User> PaginatedUsers =>
        Userslist
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();

    private List<TrustYourBrand.Models.InspectionDto> PaginatedInspections =>
        Inspections
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();

    protected override async Task OnInitializedAsync()
    {

        CultureChangeService.OnCultureChanged += StateHasChanged;CultureChangeService.OnCultureChanged += StateHasChanged;

        await LoadUsersFromService();
        await LoadStoresFromService();
        await LoadInspections();
        await LoadTemplateQuestions();
        BrandDisponiveis = await InspectionService.GetBrands();
        TemplateDisponiveis = await TemplateService.GetTemplates();
        SectionDisponiveis = await InspectionService.GetSection();
    }

    private async Task LoadUsersFromService()
    {
        try
        {
            Userslist = await UserService.GetUsers(null);
            TotalPages = (int)Math.Ceiling(Userslist.Count / (double)PageSize);
        }
        catch
        {
            Userslist = new();
        }
    }

    private async Task LoadStoresFromService()
    {
        try
        {
            StoreList = await StoreService.GetStoresAsync();
            TotalPages = (int)Math.Ceiling(StoreList.Count / (double)PageSize);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar lojas: {ex.Message}");
            StoreList = new List<StoreDto>();
            TotalPages = 1;
        }
    }

    private async Task LoadInspections()
    {
        try
        {
            Inspections = (await InspectionService.GetInspectionsAsync())
                .Where(i => i.IsActive)
                .ToList();
            TotalPages = (int)Math.Ceiling(Inspections.Count / (double)PageSize);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading inspections: {ex.Message}");
            Inspections = new List<InspectionDto>();
        }
    }

    private async Task LoadTemplateQuestions()
    {
        var targetInspection = ShowEditModal && EditingInspection != null ? EditingInspection : NewInspection;
        isLoadingQuestions = true;
        try
        {
            if (targetInspection.TemplateId.HasValue)
            {
                TemplateQuestions = await TemplateService.GetTemplateQuestions(targetInspection.TemplateId.Value);
                targetInspection.Questions.Clear();
                Console.WriteLine($"Loaded {TemplateQuestions.Count} questions for template ID {targetInspection.TemplateId.Value}");
            }
            else
            {
                TemplateQuestions = new List<CustomQuestion>();
                targetInspection.Questions.Clear();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load template questions: {ex.Message}";
            TemplateQuestions = new List<CustomQuestion>();
            Console.WriteLine($"❌ Error loading template questions: {ex.Message}");
        }
        finally
        {
            isLoadingQuestions = false;
            StateHasChanged();
        }
    }


    private async Task OnTemplateChanged()
    {
        var targetInspection = ShowEditModal && EditingInspection != null ? EditingInspection : NewInspection;
        TemplateQuestions.Clear();
        if (targetInspection.TemplateId.HasValue)
        {
            await LoadTemplateQuestions();
        }
        StateHasChanged();
    }


    private void ToggleSelectAllStores(bool isChecked)
    {
        var targetList = ShowEditModal && EditingInspection != null ? EditingInspection.SelectedStoreIds : NewInspection.SelectedStoreIds;
        if (isChecked)
        {
            targetList.Clear();
            targetList.AddRange(StoreList.Select(s => s.LojaId));
        }
        else
        {
            targetList.Clear();
        }
    }

    private void ToggleSelectAllGuests(bool isChecked)
    {
        var targetList = ShowEditModal && EditingInspection != null ? EditingInspection.SelectedGuestIds : NewInspection.SelectedGuestIds;
        if (isChecked)
        {
            targetList.Clear();
            targetList.AddRange(Userslist.Select(u => u.Id));
        }
        else
        {
            targetList.Clear();
        }
    }

    private void ShowInspectionDetails(InspectionDto inspection)
    {
        if (ExpandedInspectionId == inspection.Id)
        {
            ExpandedInspectionId = null;
        }
        else
        {
            ExpandedInspectionId = inspection.Id;
        }
    }

    private void OpenCreateInspection()
    {
        NewInspection = new InspectionFormModel();
        ShowCreateInspection = true;
        CurrentStep = 1;
        TemplateQuestions = new List<CustomQuestion>();
        errorMessage = null;
        successMessage = null;
    }

    private void CancelCreate()
    {
        ShowCreateInspection = false;
        NewInspection = new InspectionFormModel();
        CurrentStep = 1;
        TemplateQuestions = new List<CustomQuestion>();
        errorMessage = null;
        successMessage = null;
    }

    private void SetStep(int step)
    {
        CurrentStep = step;
    }

    private void NextStep()
    {
        if (CurrentStep < 4)
        {
            if (CurrentStep == 1)
            {
                if (string.IsNullOrEmpty(NewInspection.InspectionName))
                {
                    errorMessage = "The Inspection Name field is required.";
                    return;
                }
                if (!NewInspection.StartDate.HasValue)
                {
                    errorMessage = "The Start Date field is required.";
                    return;
                }
                if (!NewInspection.DueDate.HasValue)
                {
                    errorMessage = "The Due Date field is required.";
                    return;
                }
            }
            if (CurrentStep == 2 && NewInspection.SelectedStoreIds.Count == 0)
            {
                errorMessage = "Please select at least one store in the Store Selection step.";
                return;
            }
            if (CurrentStep == 3 && NewInspection.SelectedGuestIds.Count == 0)
            {
                errorMessage = "Please select at least one user in the Guest step.";
                return;
            }
            CurrentStep++;
            if (CurrentStep == 4 && NewInspection.TemplateId.HasValue)
            {
                // Recarregar perguntas ao entrar no passo 4
                _ = LoadTemplateQuestions();
            }
            errorMessage = null;
            StateHasChanged();
        }
    }

    private void PreviousStep()
    {
        if (CurrentStep > 1)
        {
            CurrentStep--;
            errorMessage = null;
        }
    }

    private async Task CreateInspection()
    {
        try
        {
            // Step 1: Validate all required fields
            if (string.IsNullOrEmpty(NewInspection.InspectionName))
            {
                errorMessage = "Inspection Name is required.";
                return;
            }
            if (string.IsNullOrEmpty(NewInspection.Language))
            {
                errorMessage = "Language is required.";
                return;
            }
            if (!NewInspection.StartDate.HasValue)
            {
                errorMessage = "Start Date is required.";
                return;
            }
            if (!NewInspection.DueDate.HasValue)
            {
                errorMessage = "Due Date is required.";
                return;
            }
            if (!NewInspection.MarcaId.HasValue)
            {
                errorMessage = "Brand is required.";
                return;
            }
            if (NewInspection.SelectedStoreIds.Count == 0)
            {
                errorMessage = "At least one store must be selected.";
                return;
            }
            if (NewInspection.SelectedGuestIds.Count == 0)
            {
                errorMessage = "At least one guest must be selected.";
                return;
            }
            if (!NewInspection.TemplateId.HasValue && !NewInspection.Questions.Any())
            {
                errorMessage = "Either select a template or add at least one custom question.";
                return;
            }
            if (!NewInspection.TemplateId.HasValue && NewInspection.Questions.Any(q => string.IsNullOrEmpty(q.Text) || string.IsNullOrEmpty(q.ResponseType)))
            {
                errorMessage = "All custom questions must have text and a response type.";
                return;
            }

            // Step 2: Create DTO for each store and user combination
            foreach (var storeId in NewInspection.SelectedStoreIds)
            {
                foreach (var userId in NewInspection.SelectedGuestIds)
                {
                    var dto = new CreateInspectionDto
                        {
                            LojaId = storeId,
                            UserId = userId,
                            DataInicio = NewInspection.StartDate.Value,
                            DataFim = NewInspection.DueDate.Value,
                            Descricao = NewInspection.Description,
                            Frequencia = NewInspection.Frequency,
                            InspecaoName = NewInspection.InspectionName,
                            Estado = "Ongoing",
                            IsActive = true,
                            FormularioId = NewInspection.TemplateId,
                            MarcaId = NewInspection.MarcaId,
                            Language = NewInspection.Language,
                            Status = "Active",
                            Mode = "Launched",
                            SeccaoIds = selectedSection.HasValue ? new List<int> { selectedSection.Value } : null,
                            PerguntasPersonalizadas = NewInspection.TemplateId.HasValue
                                ? TemplateQuestions.Select(q => new CreatePerguntaPersonalizadaDto
                                {
                                    Texto = q.Text,
                                    TipoResposta = q.ResponseType,
                                    Opcoes = q.Options,
                                    Resposta = null
                                }).ToList()
                                : NewInspection.Questions.Select(q => new CreatePerguntaPersonalizadaDto
                                {
                                    Texto = q.Text,
                                    TipoResposta = q.ResponseType,
                                    Opcoes = q.Options,
                                    Resposta = null
                                }).ToList()
                        };

                    // Step 3: Call the service to create the inspection
                    var result = await InspectionService.CreateInspectionAsync(dto);

                    if (!result.Success)
                    {
                        errorMessage = result.ErrorMessage;
                        return;
                    }
                }
            }

            // Step 4: Handle success
            successMessage = "Inspection(s) created successfully.";
            ShowCreateInspection = false;
            NewInspection = new InspectionFormModel();
            CurrentStep = 1;
            TemplateQuestions = new List<CustomQuestion>();
            await LoadInspections();
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
            Console.WriteLine($"Error creating inspection: {ex}");
        }
    }

    private async Task SaveDraft()
    {
        try
        {
            // Step 1: Validate minimal required fields
            if (string.IsNullOrEmpty(NewInspection.InspectionName))
            {
                errorMessage = "Inspection Name is required to save a draft.";
                return;
            }

            // Step 2: Create DTO for each store and user combination
            if (NewInspection.SelectedStoreIds.Count == 0 || NewInspection.SelectedGuestIds.Count == 0)
            {
                errorMessage = "At least one store and one guest must be selected to save a draft.";
                return;
            }

            foreach (var storeId in NewInspection.SelectedStoreIds)
            {
                foreach (var userId in NewInspection.SelectedGuestIds)
                {
                    var dto = new CreateInspectionDto
                        {
                            LojaId = storeId,
                            UserId = userId,
                            DataInicio = NewInspection.StartDate ?? DateTime.Now,
                            DataFim = NewInspection.DueDate ?? DateTime.Now.AddDays(7),
                            Descricao = NewInspection.Description,
                            Frequencia = NewInspection.Frequency,
                            InspecaoName = NewInspection.InspectionName,
                            Estado = "Standby",
                            IsActive = true,
                            FormularioId = NewInspection.TemplateId,
                            MarcaId = NewInspection.MarcaId,
                            Language = NewInspection.Language ?? "English", // Default to English if not specified
                            Status = "Active",
                            Mode = "Draft",
                            SeccaoIds = selectedSection.HasValue ? new List<int> { selectedSection.Value } : null,
                            PerguntasPersonalizadas = NewInspection.TemplateId.HasValue
                                ? TemplateQuestions.Select(q => new CreatePerguntaPersonalizadaDto
                                {
                                    Texto = q.Text,
                                    TipoResposta = q.ResponseType,
                                    Opcoes = q.Options,
                                    Resposta = null
                                }).ToList()
                                : NewInspection.Questions.Select(q => new CreatePerguntaPersonalizadaDto
                                {
                                    Texto = q.Text,
                                    TipoResposta = q.ResponseType,
                                    Opcoes = q.Options,
                                    Resposta = null
                                }).ToList()
                        };

                    // Step 3: Call the service to create the draft
                    var result = await InspectionService.CreateInspectionAsync(dto);

                    if (!result.Success)
                    {
                        errorMessage = result.ErrorMessage;
                        return;
                    }
                }
            }

            // Step 4: Handle success
            successMessage = "Draft saved successfully!";
            ShowCreateInspection = false;
            NewInspection = new InspectionFormModel();
            CurrentStep = 1;
            TemplateQuestions = new List<CustomQuestion>();
            await LoadInspections();
            StateHasChanged();
            await Task.Delay(2000);
            successMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
            Console.WriteLine($"Error saving draft: {ex}");
        }
    }

    private void ShowDeleteConfirmation(TrustYourBrand.Models.InspectionDto inspection)
    {
        InspectionToDelete = inspection;
        ShowDeleteModal = true;
    }

    private void CancelDelete()
    {
        ShowDeleteModal = false;
        InspectionToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            if (InspectionToDelete != null)
            {
                var result = await InspectionService.DeleteInspectionAsync(InspectionToDelete.Id);
                if (result.Success)
                {
                    successMessage = $"Inspection '{InspectionToDelete.InspectionName}' deleted successfully.";
                    ShowDeleteModal = false;
                    InspectionToDelete = null;
                    await LoadInspections();
                    await Task.Delay(2000); // Optional delay to show success message
                    successMessage = null;
                }
                else
                {
                    errorMessage = result.ErrorMessage ?? "Failed to delete inspection.";
                }
            }
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("request URI"))
        {
            errorMessage = "API request failed: Base address is not configured. Please check the application configuration.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
            Console.WriteLine($"Error deleting inspection: {ex}");
        }
    }

    private async Task EditInspection(int inspectionId)
    {
        try
        {
            var inspection = await InspectionService.GetInspectionByIdAsync(inspectionId);
            if (inspection != null)
            {
                Console.WriteLine($"Inspection Loaded: ID={inspection.Id}, Name={inspection.InspectionName}, TemplateId={inspection.TemplateId}, StartDate={inspection.StartDate}, Language={inspection.Language}, Frequency={inspection.Frequency}, MarcaId={inspection.MarcaId}, LojaId={inspection.LojaId}, UserId={inspection.UserId}");

                // Initialize EditingInspection
                EditingInspection = new InspectionFormModel
                    {
                        TemplateId = inspection.TemplateId,
                        Language = inspection.Language,
                        InspectionName = inspection.InspectionName,
                        Frequency = inspection.Frequency,
                        StartDate = inspection.StartDate,
                        DueDate = inspection.DueDate,
                        Description = inspection.Description,
                        MarcaId = inspection.MarcaId,
                        SelectedStoreIds = inspection.LojaId.HasValue ? new List<int> { inspection.LojaId.Value } : new List<int>(),
                        SelectedGuestIds = inspection.UserId.HasValue ? new List<int> { inspection.UserId.Value } : new List<int>(),
                        Questions = inspection.Questions?.Select(q => new CustomQuestion
                        {
                            Text = q.Text,
                            ResponseType = q.ResponseType,
                            Options = q.Options ?? new List<string>()
                        }).ToList() ?? new List<CustomQuestion>()
                    };

                // Load sections if available
                selectedSection = inspection.SeccaoIds?.FirstOrDefault();

                // Load template questions if applicable
                TemplateQuestions = new List<CustomQuestion>();
                if (EditingInspection.TemplateId.HasValue)
                {
                    try
                    {
                        TemplateQuestions = await TemplateService.GetTemplateQuestions(EditingInspection.TemplateId.Value);
                        Console.WriteLine($"Loaded {TemplateQuestions.Count} template questions for TemplateId={EditingInspection.TemplateId}");
                        if (inspection.Questions == null || !inspection.Questions.Any())
                        {
                            EditingInspection.Questions.Clear();
                        }
                    }
                    catch (Exception ex)
                    {
                        errorMessage = $"Failed to load template questions: {ex.Message}";
                        Console.WriteLine($"Error loading template questions: {ex}");
                    }
                }

                ExpandedInspectionId = inspectionId;
                ShowEditModal = true;
                CurrentStep = 1;
                StateHasChanged();
                errorMessage = null;
                successMessage = null;
            }
            else
            {
                errorMessage = "Inspection not found.";
                Console.WriteLine($"Inspection with ID {inspectionId} not found.");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading inspection: {ex.Message}";
            Console.WriteLine($"Error loading inspection: {ex}");
        }
    }

    private async Task UpdateInspection()
    {
        try
        {
            // Step 1: Validate all required fields
            // if (string.IsNullOrEmpty(NewInspection.InspectionName))
            // {
            //     errorMessage = "Inspection Name is required.";
            //     return;
            // }
            // if (string.IsNullOrEmpty(NewInspection.Language))
            // {
            //     errorMessage = "Language is required.";
            //     return;
            // }
            // if (!NewInspection.StartDate.HasValue)
            // {
            //     errorMessage = "Start Date is required.";
            //     return;
            // }
            // if (!NewInspection.DueDate.HasValue)
            // {
            //     errorMessage = "Due Date is required.";
            //     return;
            // }
            // if (!NewInspection.MarcaId.HasValue)
            // {
            //     errorMessage = "Brand is required.";
            //     return;
            // }
            // if (NewInspection.SelectedStoreIds.Count == 0)
            // {
            //     errorMessage = "At least one store must be selected.";
            //     return;
            // }
            // if (NewInspection.SelectedGuestIds.Count == 0)
            // {
            //     errorMessage = "At least one guest must be selected.";
            //     return;
            // }
            // if (!NewInspection.TemplateId.HasValue && !NewInspection.Questions.Any())
            // {
            //     errorMessage = "Either select a template or add at least one custom question.";
            //     return;
            // }
            // if (!NewInspection.TemplateId.HasValue && NewInspection.Questions.Any(q => string.IsNullOrEmpty(q.Text) || string.IsNullOrEmpty(q.ResponseType)))
            // {
            //     errorMessage = "All custom questions must have text and a response type.";
            //     return;
            // }

            // Step 2: Get the inspection ID
            var inspectionToUpdate = Inspections.FirstOrDefault(i => i.Id == ExpandedInspectionId);
            if (inspectionToUpdate == null)
            {
                errorMessage = "Inspection not found for update.";
                return;
            }

            // Step 3: Create DTO for the updated inspection
            var dto = new UpdateInspectionDto
                {
                    Id = inspectionToUpdate.Id,
                    LojaId = EditingInspection.SelectedStoreIds.FirstOrDefault(),
                    UserId = EditingInspection.SelectedGuestIds.FirstOrDefault(),
                    DataInicio = EditingInspection.StartDate.Value,
                    DataFim = EditingInspection.DueDate.Value,
                    Descricao = EditingInspection.Description,
                    Frequencia = EditingInspection.Frequency,
                    InspecaoName = EditingInspection.InspectionName,
                    Estado = "Standby",
                    IsActive = true,
                    FormularioId = EditingInspection.TemplateId,
                    MarcaId = EditingInspection.MarcaId,
                    Language = EditingInspection.Language,
                    Status = "Active",
                    Mode = "Draft",
                    SeccaoIds = selectedSection.HasValue ? new List<int> { selectedSection.Value } : null,
                    PerguntasPersonalizadas = EditingInspection.TemplateId.HasValue
                        ? TemplateQuestions.Select(q => new CreatePerguntaPersonalizadaDto
                        {
                            Texto = q.Text,
                            TipoResposta = q.ResponseType,
                            Opcoes = q.Options,
                            Resposta = null
                        }).ToList()
                        : EditingInspection.Questions.Select(q => new CreatePerguntaPersonalizadaDto
                        {
                            Texto = q.Text,
                            TipoResposta = q.ResponseType,
                            Opcoes = q.Options,
                            Resposta = null
                        }).ToList()
                };

            // Step 4: Call the service to update the inspection
            var result = await InspectionService.UpdateInspectionAsync(inspectionToUpdate.Id, dto);

            if (!result.Success)
            {
                errorMessage = result.ErrorMessage;
                return;
            }

            // Step 5: Handle success
            successMessage = "Inspection updated successfully.";
            ShowEditModal = false;
            EditingInspection = null;
            CurrentStep = 1;
            TemplateQuestions = new List<CustomQuestion>();
            await LoadInspections();
            StateHasChanged();
            await Task.Delay(2000);
            successMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
            Console.WriteLine($"Error updating inspection: {ex}");
        }
    }

    private void UpdateStoreSelection(int storeId, bool isChecked)
    {
        var targetList = ShowEditModal && EditingInspection != null ? EditingInspection.SelectedStoreIds : NewInspection.SelectedStoreIds;
        if (isChecked)
        {
            if (!targetList.Contains(storeId))
                targetList.Add(storeId);
        }
        else
        {
            targetList.Remove(storeId);
        }
    }

    private void UpdateGuestSelection(int guestId, bool isChecked)
    {
        var targetList = ShowEditModal && EditingInspection != null ? EditingInspection.SelectedGuestIds : NewInspection.SelectedGuestIds;
        if (isChecked)
        {
            if (!targetList.Contains(guestId))
                targetList.Add(guestId);
        }
        else
        {
            targetList.Remove(guestId);
        }
        StateHasChanged();
    }

    private void AddQuestion()
    {
        var targetList = ShowEditModal && EditingInspection != null ? EditingInspection.Questions : NewInspection.Questions;
        targetList.Add(new CustomQuestion
            {
                Text = "",
                ResponseType = "",
                Options = new List<string>()
            });
    }

    private void RemoveQuestion(int index)
    {
        var targetList = ShowEditModal && EditingInspection != null ? EditingInspection.Questions : NewInspection.Questions;
        if (index >= 0 && index < targetList.Count)
        {
            targetList.RemoveAt(index);
        }
    }

    private async Task UpdateInspectionStatus(InspectionDto inspection, string newStatus)
    {
        try
        {
            inspection.IsCanceled = newStatus == "Canceled";

            if (newStatus == "Standby")
            {
                inspection.Mode = "Draft";
            }
            else if (newStatus == "Ongoing" || newStatus == "Closed")
            {
                inspection.Mode = "Launched";
            }

            if (newStatus == "Closed" && (inspection.TotalTasks == 0 || inspection.CompletedTasks < inspection.TotalTasks))
            {
                inspection.Estado = "Ongoing";
                errorMessage = "The 'Closed' status can only be applied when all tasks are completed.";
                return;
            }

            inspection.Estado = newStatus;
            await LoadInspections();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating status: {ex.Message}";
        }
    }

    private string GetStatusDotClass(string estado)
    {
        return estado switch
        {
            "Ongoing" => "status-dot-ongoing",
            "Standby" => "status-dot-standby",
            "Closed" => "status-dot-closed",
            "Canceled" => "status-dot-canceled",
            _ => ""
        };
    }
}